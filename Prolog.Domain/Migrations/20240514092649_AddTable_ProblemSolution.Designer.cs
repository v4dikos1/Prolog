// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prolog.Domain;
using Prolog.Domain.Entities;

#nullable disable

namespace Prolog.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240514092649_AddTable_ProblemSolution")]
    partial class AddTable_ProblemSolution
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prolog.Domain.Entities.ActionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ActionDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("action_date_time");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_name");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<JsonDocument>("Filter")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("filter");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text")
                        .HasColumnName("identity_user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_surname");

                    b.HasKey("Id")
                        .HasName("pk_action_log");

                    b.ToTable("action_log", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_system_id");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.HasIndex("ExternalSystemId")
                        .HasDatabaseName("ix_customer_external_system_id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_system_id");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram");

                    b.HasKey("Id")
                        .HasName("pk_driver");

                    b.HasIndex("ExternalSystemId")
                        .HasDatabaseName("ix_driver_external_system_id");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.DriverTransportBind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.HasKey("Id")
                        .HasName("pk_driver_transport_bind");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_driver_transport_bind_driver_id");

                    b.HasIndex("TransportId")
                        .HasDatabaseName("ix_driver_transport_bind_transport_id");

                    b.ToTable("driver_transport_bind", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.ExternalSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_external_system");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_system_identity_id");

                    b.ToTable("external_system", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Address>("Address")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("address");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coordinates");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateDelivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_delivered");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTimeOffset>("DeliveryDateFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date_from");

                    b.Property<DateTimeOffset>("DeliveryDateTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date_to");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_system_id");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("order_status");

                    b.Property<DateTimeOffset>("PickUpDateFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pick_up_date_from");

                    b.Property<DateTimeOffset>("PickUpDateTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pick_up_date_to");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_id");

                    b.Property<Guid?>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_order_customer_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_order_driver_id");

                    b.HasIndex("ExternalSystemId")
                        .HasDatabaseName("ix_order_external_system_id");

                    b.HasIndex("StorageId")
                        .HasDatabaseName("ix_order_storage_id");

                    b.HasIndex("TransportId")
                        .HasDatabaseName("ix_order_transport_id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_order_item");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_item_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_item_product_id");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.ProblemSolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_id");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<int>("StopType")
                        .HasColumnType("integer")
                        .HasColumnName("stop_type");

                    b.HasKey("Id")
                        .HasName("pk_problem_solution");

                    b.ToTable("problem_solution", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_system_id");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("ExternalSystemId")
                        .HasDatabaseName("ix_product_external_system_id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Address>("Address")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("address");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coordinates");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_system_id");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_storage");

                    b.HasIndex("ExternalSystemId")
                        .HasDatabaseName("ix_storage_external_system_id");

                    b.ToTable("storage", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<decimal>("Capacity")
                        .HasColumnType("numeric")
                        .HasColumnName("capacity");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExternalSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_system_id");

                    b.Property<decimal>("FuelConsumption")
                        .HasColumnType("numeric")
                        .HasColumnName("fuel_consumption");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("licence_plate");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_transport");

                    b.HasIndex("ExternalSystemId")
                        .HasDatabaseName("ix_transport_external_system_id");

                    b.ToTable("transport", (string)null);
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customer_external_systems_external_system_id");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Driver", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_external_systems_external_system_id");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.DriverTransportBind", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_transport_bind_driver_driver_id");

                    b.HasOne("Prolog.Domain.Entities.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_transport_bind_transports_transport_id");

                    b.Navigation("Driver");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Order", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_customer_customer_id");

                    b.HasOne("Prolog.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_driver_driver_id");

                    b.HasOne("Prolog.Domain.Entities.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_external_system_external_system_id");

                    b.HasOne("Prolog.Domain.Entities.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_storages_storage_id");

                    b.HasOne("Prolog.Domain.Entities.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_transports_transport_id");

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("ExternalSystem");

                    b.Navigation("Storage");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_order_order_id");

                    b.HasOne("Prolog.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Product", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_external_system_external_system_id");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Storage", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_storage_external_system_external_system_id");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Transport", b =>
                {
                    b.HasOne("Prolog.Domain.Entities.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_transport_external_system_external_system_id");

                    b.Navigation("ExternalSystem");
                });

            modelBuilder.Entity("Prolog.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
